{
	"nodes":[
		{"id":"ebfd761f626a945a","type":"text","text":"CONTROLLER","x":3181,"y":-58,"width":250,"height":60,"color":"6"},
		{"id":"8239e01f0abcd5cf","type":"text","text":"MODEL","x":2205,"y":-58,"width":250,"height":60,"color":"6"},
		{"id":"28fb53d68f3081f1","type":"text","text":"``` js\nconst sqlite3 = require('sqlite3').verbose();\n\nclass TaskModel {\n  constructor() {\n    this.db = new sqlite3.Database('tasks.db');\n    this.initDatabase();\n  }\n\n  initDatabase() {\n    const sql = `\n      CREATE TABLE IF NOT EXISTS tasks (\n        id INTEGER PRIMARY KEY AUTOINCREMENT,\n        nome TEXT,\n        email TEXT,\n        senha TEXT\n      )\n    `;\n    this.db.run(sql);\n  }\n\n  getAllTasks(callback) {\n    const sql = 'SELECT * FROM tasks';\n    this.db.all(sql, (err, rows) => {\n      callback(err, rows || []);  // Retorna um array vazio se rows for nulo\n    });\n  }\n\n  addTask(nome, email, senha, callback) {\n    const sql = 'INSERT INTO tasks (nome, email, senha) VALUES (?, ?, ?)';\n    this.db.run(sql, [nome, email, senha], (err) => {\n      callback(err, this.lastID);\n    });\n  }\n\n  updateTask(taskId, nome, email, senha, callback) {\n    const sql = 'UPDATE tasks SET nome = ?, email = ?, senha = ? WHERE id = ?';\n    this.db.run(sql, [nome, email, senha, taskId], function(err) {\n      callback(err, this.changes);\n    });\n  }\n\n  deleteTask(taskId, callback) {\n    const sql = 'DELETE FROM tasks WHERE id = ?';\n    this.db.run(sql, [taskId], function(err) {\n      callback(err, this.changes);\n    });\n  }\n}\n\nmodule.exports = TaskModel;\n```","x":1880,"y":53,"width":900,"height":980,"color":"6"},
		{"id":"ba3b3c090e58803a","type":"text","text":"``` js\nconst TaskModel = require('./model');\n\nclass TaskController {\n  constructor() {\n    this.taskModel = new TaskModel();\n  }\n\n  getAllTasks(req, res) {\n    this.taskModel.getAllTasks((err, tasks) => {\n      if (err) {\n        return res.status(500).json({ error: 'Internal Server Error' });\n      }\n      res.json(tasks);\n    });\n  }\n\n  addTask(req, res) {\n    const { nome, email, senha } = req.body;\n    // Valide os campos conforme necessário\n    if (!nome || !email || !senha) {\n      return res.status(400).json({ error: 'Invalid input' });\n    }\n  \n    // Adicione os dados ao banco de dados\n    this.taskModel.addTask(nome, email, senha, (err, taskId) => {\n      if (err) {\n        return res.status(500).json({ error: 'Internal Server Error' });\n      }\n      res.json({ id: taskId, nome, email, senha });\n    });\n  }\n\n\n  updateTask(req, res) {\n    const { id, nome, email, senha } = req.body;\n    if (!id || !nome || !email || !senha) {\n      return res.status(400).json({ error: 'Invalid input' });\n    }\n\n    this.taskModel.updateTask(id, nome, email, senha, (err, affectedRows) => {\n      if (err) {\n        return res.status(500).json({ error: 'Internal Server Error' });\n      }\n\n      if (affectedRows === 0) {\n        return res.status(404).json({ error: 'Task not found' });\n      }\n\n      res.json({ id, nome, email, senha });\n    });\n  }\n\n  deleteTask(req, res) {\n    const taskId = req.params.id;\n    if (!taskId) {\n      return res.status(400).json({ error: 'Invalid input' });\n    }\n\n    this.taskModel.deleteTask(taskId, (err, affectedRows) => {\n      if (err) {\n        return res.status(500).json({ error: 'Internal Server Error' });\n      }\n\n      if (affectedRows === 0) {\n        return res.status(404).json({ error: 'Task not found' });\n      }\n\n      res.json({ success: true });\n    });\n  }\n}\n\nmodule.exports = TaskController;\n```","x":2891,"y":53,"width":829,"height":1427,"color":"6"},
		{"id":"f65d3fa9eec128db","type":"text","text":"``` js const express = require('express');\nconst bodyParser = require('body-parser');\nconst cors = require('cors'); // Importe o pacote cors\nconst TaskController = require('./src/controller');\n\nconst app = express();\nconst port = 3000;\n\nconst taskController = new TaskController();\n\napp.use(cors()); // Use o middleware cors\napp.use(bodyParser.json());\n\napp.get('/tasks', (req, res) => {\n  taskController.getAllTasks(req, res);\n});\n\napp.post('/tasks', (req, res) => {\n  taskController.addTask(req, res);\n});\n\napp.put('/tasks', (req, res) => {\n  taskController.updateTask(req, res);\n});\n\napp.delete('/tasks/:id', (req, res) => {\n  taskController.deleteTask(req, res);\n});\n\napp.listen(port, () => {\n  console.log(`Server is running on http://localhost:${port}`);\n});\n```","x":3801,"y":53,"width":673,"height":640,"color":"6"},
		{"id":"bc56b5abadb0c760","type":"text","text":"BACKEND","x":1880,"y":-160,"width":2594,"height":50,"color":"6"},
		{"id":"998116b2b4e34881","type":"text","text":"FRONTEND","x":1880,"y":-1520,"width":2594,"height":50,"color":"4"},
		{"id":"53a68538e66c314b","x":3572,"y":-1360,"width":250,"height":60,"color":"4","type":"text","text":"SERVIDOR"},
		{"id":"860d3ad96804ad7c","type":"text","text":"``` js\nconst express = require('express');\nconst path = require('path');\n\nconst app = express();\n\napp.use(express.json());\n\nconst PORT = 3001;\n\napp.get('/', (req, res) => {\n  res.sendFile(path.join(__dirname, 'index.html'));\n});\n\napp.listen(PORT, () => {\n  console.log(`Ouvindo a porta http://localhost:${PORT}`);\n});\n\n\n```","x":3382,"y":-1240,"width":631,"height":435,"color":"4"},
		{"id":"b6a716b91199e029","type":"text","text":"``` html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n  <title>Formulário de Tarefas</title>\n</head>\n<body>\n  <h1>Formulário de Tarefas</h1>\n\n  <form id=\"form-api\">\n    <label for=\"nome\">Nome</label>\n    <input type=\"text\" name=\"nome\" id=\"nome\" placeholder=\"Digite seu nome\">\n  \n    <label for=\"email\">Email</label>\n    <input type=\"email\" name=\"email\" id=\"email\" placeholder=\"Digite seu email\">\n  \n    <label for=\"senha\">Senha</label>\n    <input type=\"password\" name=\"senha\" id=\"senha\" placeholder=\"Digite sua senha\">\n  \n    <button type=\"submit\">Enviar</button>\n  </form>\n  \n  <script>\n    const form = document.getElementById('form-api');\n\n    form.addEventListener('submit', (e) => {\n      e.preventDefault();\n\n      const formData = new FormData(e.target);\n      const data = Object.fromEntries(formData);\n\n      fetch('http://localhost:3000/tasks', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(data),\n      })\n      .then(response => response.json())\n      .then(data => {\n        console.log('Success:', data);\n      })\n      .catch((error) => {\n        console.error('Error:', error);\n      });\n    });\n  </script>\n</body>\n</html>\n\n```","x":2260,"y":-1240,"width":860,"height":1000,"color":"4"},
		{"id":"2ff9314e703ad1cd","x":2565,"y":-1360,"width":250,"height":60,"color":"4","type":"text","text":"INDEX.HTML"},
		{"id":"09f2a0b83d75f1e6","x":4013,"y":-58,"width":250,"height":60,"color":"6","type":"text","text":"SERVIDOR\n"}
	],
	"edges":[
		{"id":"8a32df6a6e774354","fromNode":"8239e01f0abcd5cf","fromSide":"bottom","toNode":"28fb53d68f3081f1","toSide":"top","toEnd":"none"},
		{"id":"93e340a557c2e4ae","fromNode":"ebfd761f626a945a","fromSide":"bottom","toNode":"ba3b3c090e58803a","toSide":"top","toEnd":"none"},
		{"id":"391c96c0ba48c081","fromNode":"ebfd761f626a945a","fromSide":"left","toNode":"8239e01f0abcd5cf","toSide":"right","label":"Requer"},
		{"id":"3bdca54ac4e5ec42","fromNode":"53a68538e66c314b","fromSide":"bottom","toNode":"860d3ad96804ad7c","toSide":"top","toEnd":"none"},
		{"id":"e58fa0d349a0a136","fromNode":"2ff9314e703ad1cd","fromSide":"bottom","toNode":"b6a716b91199e029","toSide":"top","toEnd":"none"},
		{"id":"0e84fd6f6cd6ac39","fromNode":"09f2a0b83d75f1e6","fromSide":"bottom","toNode":"f65d3fa9eec128db","toSide":"top","toEnd":"none"},
		{"id":"0983175700476017","fromNode":"09f2a0b83d75f1e6","fromSide":"left","toNode":"ebfd761f626a945a","toSide":"right","label":"Requer"}
	]
}